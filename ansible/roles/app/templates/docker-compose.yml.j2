services:
  caddy:
    image: caddy:latest
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_config:/config
    networks:
      - backend
    depends_on:
      - splitter

  splitter:
    build:
      context: ./splitter    # built from your synced /opt/splitter source
    image: splitter:latest
    restart: unless-stopped
    expose:
      - "8080"
    env_file:
      - .env
    networks:
      - backend
    depends_on:
      - postgres

  postgres:
    image: postgres:18
    restart: unless-stopped
    env_file:
      - .env                 
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend

  grafana:
    image: grafana/grafana:latest
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER={{ grafana_user }}
      - GF_SECURITY_ADMIN_PASSWORD={{ grafana_pass }}
      - GF_AUTH_ANONYMOUS_ENABLED=false
    volumes:
    - grafana_data:/var/lib/grafana
    expose:
      - "3000"
    networks:
      - backend

  loki:
    image: grafana/loki:latest
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - backend

  promtail:
    image: grafana/promtail:latest
    volumes:
      - /var/log:/var/log
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./promtail-config.yml:/etc/promtail/config.yml
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    networks:
      - backend

volumes:
  caddy_data:
  caddy_config:
  postgres_data:
  grafana_data:

networks:
  backend:
    driver: bridge

