// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: events.sql

package dbsqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const insertEvent = `-- name: InsertEvent :one
INSERT INTO events (feature_id, user_id, variant, event_type)
VALUES ($1, $2, $3, $4)
RETURNING id, feature_id, user_id, variant, event_type, created_at
`

type InsertEventParams struct {
	FeatureID pgtype.Int4
	UserID    pgtype.Text
	Variant   pgtype.Text
	EventType pgtype.Text
}

func (q *Queries) InsertEvent(ctx context.Context, arg InsertEventParams) (Event, error) {
	row := q.db.QueryRow(ctx, insertEvent,
		arg.FeatureID,
		arg.UserID,
		arg.Variant,
		arg.EventType,
	)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.FeatureID,
		&i.UserID,
		&i.Variant,
		&i.EventType,
		&i.CreatedAt,
	)
	return i, err
}

const listEventsByFeatureID = `-- name: ListEventsByFeatureID :many
SELECT
  id,
  feature_id,
  user_id,
  variant,
  event_type,
  created_at
FROM events
WHERE feature_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListEventsByFeatureID(ctx context.Context, featureID pgtype.Int4) ([]Event, error) {
	rows, err := q.db.Query(ctx, listEventsByFeatureID, featureID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.FeatureID,
			&i.UserID,
			&i.Variant,
			&i.EventType,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
